#!/usr/bin/env node
// Generate src/entries.js

const util = require("util")
const fs = require("fs")
const path = require("path")

const glob = require("glob")
const moment = require("moment")

const readFileAsync = util.promisify(fs.readFile)

const TITLE_REGEXP = /title: "(?<title>[^"]+)"(,|\n)/
const PUBLISHED_AT_REGEXP = /publishedAt: "(?<publishedAt>[^"]+)"(,|\n)/

function extractTitle(content) {
  return TITLE_REGEXP.exec(content).groups.title
}

function extractPublishedAt(content) {
  return PUBLISHED_AT_REGEXP.exec(content).groups.publishedAt
}

function extractHref(string) {
  return path.join(path.dirname(string.substr("pages/".length)), path.basename(string, ".mdx"))
}

async function extractMeta(mdxFilepath) {
  const content = await readFileAsync(mdxFilepath)
  console.log(`Processing: ${mdxFilepath}`)
  const publishedAt = extractPublishedAt(content)
  return {
    href: extractHref(mdxFilepath),
    moment: moment(publishedAt),
    publishedAt,
    title: extractTitle(content),
  }
}

function printEntry(entry) {
  return `{
    href: "${entry.href}",
    publishedAt: moment("${entry.publishedAt}"),
    title: ${JSON.stringify(entry.title)},
  }`
}

async function writeEntries(entries) {
  fs.writeFileSync("src/entries.ts", `// Auto generated by script/extract-metadata
    import moment from "moment"
    export default [${entries.map(printEntry).join(",")}]
  `)
  console.log("Generated: src/entries.ts")
}

async function main() {
  const mdxFilepaths = glob.sync("pages/blog/**/*.mdx")
  const entries = await Promise.all(mdxFilepaths.map(extractMeta))
  await writeEntries(entries.sort((a, b) => b.moment - a.moment))
}

main()
