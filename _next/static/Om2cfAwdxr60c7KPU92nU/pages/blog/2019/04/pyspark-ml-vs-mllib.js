(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{392:function(e,t,a){__NEXT_REGISTER_PAGE("/blog/2019/04/pyspark-ml-vs-mllib",function(){return e.exports=a(410),{page:e.exports.default}})},410:function(e,t,a){"use strict";a.r(t);var n=a(3),r=a.n(n),o=a(1),p=a.n(o),l=a(5),i=a(0);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s={},b="wrapper";function f(e){var t=e.components,a=u(e,["components"]);return Object(i.a)(b,c({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Pyspark は 2.4.1 時点で ",Object(i.a)("a",c({parentName:"p"},{href:"https://spark.apache.org/docs/2.4.1/api/python/pyspark.ml.html"}),Object(i.a)("inlineCode",{parentName:"a"},"pyspark.ml"))," と ",Object(i.a)("a",c({parentName:"p"},{href:"https://spark.apache.org/docs/2.4.1/api/python/pyspark.mllib.html"}),Object(i.a)("inlineCode",{parentName:"a"},"pyspark.mllib"))," という２つの機械学習用のパッケージを提供しています。"),Object(i.a)("p",null,"こういう用途の似たパッケージが複数存在する場合、片方がより原始的な実装になっていて細かな制御ができる一方、多くの用途では柔軟すぎて使いづらいのでそれを使いやすくラップしたものを用意している場合がありますが、今回はどうやらそういう訳ではなく純粋に ",Object(i.a)("inlineCode",{parentName:"p"},"pyspark.mllib")," から ",Object(i.a)("inlineCode",{parentName:"p"},"pyspark.ml")," に移行している途中のようです。どうしてこのようなことになっているのでしょうか。"),Object(i.a)("h2",null,"RDD → DataFrame / Dataset"),Object(i.a)("p",null,"Spark は内部で RDD (Resilient Distributed Dataset) と呼ばれるデータ構造を複数マシンのクラスタに分散して処理を実行します。RDD に格納するデータは構造化されている必要がないので、メディアストリームなどを格納することもできます。"),Object(i.a)("p",null,"一方で分散処理タスクで対象となるデータはある種の構造を持っていることが大半です。たとえば二次元の行列演算であれば一つ一つのデータは行と列と値の三組で表すことができます。ここに最適化の余地があり DataFrame / Dataset という新しいデータ構造が RDD の上に構築されました。"),Object(i.a)("p",null,"Dataset は構造化されたデータを扱えるだけでなく、強く型付けされた API と型なしの API に分類することができ、特にこの型が無い API を DataFrame と呼びます。名前からも分かるように Pandas の DataFrame と似た構造を持っています。Python にはコンパイル時の型安全がないので、 DataFrame だけを使うことができます。"),Object(i.a)("p",null,"DataFrame を使うことでメモリ使用量を削減したりパフォーマンスが改善するだけでなく、抽象度の高い機能を用いることによる生産性の向上や、 Jupyter Notebook 上でデータを表形式で綺麗に表示することができるなどのメリットがあります。"),Object(i.a)("h2",null,"pyspark.mllib → pyspark.ml"),Object(i.a)("p",null,Object(i.a)("inlineCode",{parentName:"p"},"pyspark.mllib")," と ",Object(i.a)("inlineCode",{parentName:"p"},"pyspark.ml")," はそれぞれ RDD と DataFrame をベースにした API を提供しています。機械学習のアルゴリズムは行列演算として定式化されていることが多いので、まさに DataFrame に乗せかえるのにうってつけです。"),Object(i.a)("p",null,"DataFrame を使っているということはその分パフォーマンスも優れているはずなので、今後は ",Object(i.a)("inlineCode",{parentName:"p"},"pyspark.ml")," を使えば良さそうです。"),Object(i.a)("p",null,"むしろ ",Object(i.a)("inlineCode",{parentName:"p"},"pyspark.mllib")," はすでにメンテナンスモードに入っていて Spark 3.0 で廃止されるみたいなので使うべきではないですね。"),Object(i.a)("h2",null,"参考"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",c({parentName:"li"},{href:"https://databricks.com/blog/2016/07/14/a-tale-of-three-apache-spark-apis-rdds-dataframes-and-datasets.html"}),"RDD vs DataFrames and Datasets: A Tale of Three Apache Spark APIs")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",c({parentName:"li"},{href:"https://techvidvan.com/tutorials/apache-spark-rdd-vs-datasets/"}),"Comparison between RDD vs DataSets- Apache Spark – TechVidvan"))))}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t,a,n,r,o,p){try{var l=e[o](p),i=l.value}catch(e){return void a(e)}l.done?t(i):Promise.resolve(i).then(n,r)}function h(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function O(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}f.isMDXComponent=!0,a.d(t,"default",function(){return v});var v=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),O(this,d(t).apply(this,arguments))}var n,o,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(t,p.a.Component),n=t,o=[{key:"render",value:function(){return p.a.createElement(l.a,{meta:this.props.meta},p.a.createElement(f,null))}}],i=[{key:"getInitialProps",value:function(){var e,t=(e=r.a.mark(function e(){var t,n;return r.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=a(20),n=t.entries,e.abrupt("return",{meta:n["blog/2019/04/pyspark-ml-vs-mllib"]});case 2:case"end":return e.stop()}},e)}),function(){var t=this,a=arguments;return new Promise(function(n,r){var o=e.apply(t,a);function p(e){y(o,n,r,p,l,"next",e)}function l(e){y(o,n,r,p,l,"throw",e)}p(void 0)})});return function(){return t.apply(this,arguments)}}()}],o&&h(n.prototype,o),i&&h(n,i),t}()}},[[392,1,0,2]]]);