(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{390:function(e,a,t){__NEXT_REGISTER_PAGE("/blog/2019/01/hello-ipynb",function(){return e.exports=t(408),{page:e.exports.default}})},408:function(e,a,t){"use strict";t.r(a);var n=t(3),r=t.n(n),l=t(0),c=t.n(l),s=t(9),m=function(){return c.a.createElement("div",null,c.a.createElement("div",{className:"cell border-box-sizing text_cell rendered"},c.a.createElement("div",{className:"prompt input_prompt"}),c.a.createElement("div",{className:"inner_cell"},c.a.createElement("div",{className:"text_cell_render border-box-sizing rendered_html"},c.a.createElement("p",null,"Commit: ",c.a.createElement("a",{href:"https://github.com/yuku/yuku.github.io/commit/1c18e263dcc3ca54c0061ccda57b4bca8ba9f9fd"},"yuku/yuku.github.io@",c.a.createElement("code",null,"1c18e26"))),c.a.createElement("p",null,"ブログで Jupyter Notebook を表示できるようにしました。今後機械学習やデータ分析のログなどを公開するのに使っていこうと思います 💪🏼")))),c.a.createElement("div",{className:"cell border-box-sizing code_cell rendered"},c.a.createElement("div",{className:"input"},c.a.createElement("div",{className:"prompt input_prompt"},"In [1]:"),c.a.createElement("div",{className:"inner_cell"},c.a.createElement("div",{className:"input_area"},c.a.createElement("div",{className:" highlight hl-ipython3"},c.a.createElement("pre",null,c.a.createElement("span",null),c.a.createElement("span",{className:"nb"},"print"),c.a.createElement("span",{className:"p"},"("),c.a.createElement("span",{className:"s2"},'"Hello world"'),c.a.createElement("span",{className:"p"},")"),"\n"))))),c.a.createElement("div",{className:"output_wrapper"},c.a.createElement("div",{className:"output"},c.a.createElement("div",{className:"output_area"},c.a.createElement("div",{className:"prompt"}),c.a.createElement("div",{className:"output_subarea output_stream output_stdout output_text"},c.a.createElement("pre",null,"Hello world","\n")))))),c.a.createElement("div",{className:"cell border-box-sizing text_cell rendered"},c.a.createElement("div",{className:"prompt input_prompt"}),c.a.createElement("div",{className:"inner_cell"},c.a.createElement("div",{className:"text_cell_render border-box-sizing rendered_html"},c.a.createElement("p",null,"以降実装の詳細などを備忘録として残します。"),c.a.createElement("h2",{id:"Next.js-で-ipynb-ファイルを表示する"},"Next.js で ipynb ファイルを表示する",c.a.createElement("a",{className:"anchor-link",href:"#Next.js-で-ipynb-ファイルを表示する"},"¶")),c.a.createElement("p",null,"大きく分けて 2 つの処理が必要です:"),c.a.createElement("ol",null,c.a.createElement("li",null,"Webpack を使って ipynb ファイルを読めるようにする"),c.a.createElement("li",null,"読み込んだ ipynb を React Component にする")),c.a.createElement("h3",{id:"ipynb-ファイルを読めるようにする"},"ipynb ファイルを読めるようにする",c.a.createElement("a",{className:"anchor-link",href:"#ipynb-ファイルを読めるようにする"},"¶")),c.a.createElement("p",null,"Next.js はファイルの解決に Webpack を使っているので ",c.a.createElement("a",{href:"https://www.npmjs.com/package/ipynb-loader"},"ipynb-loader")," を使うことができます。この loader は内部的で ",c.a.createElement("a",{href:"https://github.com/jupyter/nbconvert"},"jupyter/nbconvert")," を呼び出し、その結果を返すだけのものです。 jupyter/nbconvert は ipynb ファイルを HTML や Markdown などに変換する機能を提供します。"),c.a.createElement("p",null,"ipynb-loader もとい jupyter/nbconvert を使うにあたって HTML で出力するのか、それとも Markdown で出力するのか、という点が問題になりました。"),c.a.createElement("p",null,"HTML で出力する場合 Jupyter Notebook 特有の ",c.a.createElement("code",null,"In [1]")," というプロンプトを表示することができますが、その一方で LaTex 記法など一部の機能を使うことが難しくなります。",c.a.createElement("sup",{className:"footnote-ref",id:"fnref-1"},c.a.createElement("a",{href:"#fn-1"},"1"))),c.a.createElement("p",null,"Markdown として出力する場合 MDX と同じ処理ができるだけでなく、なんなら Jupyter Notebook がサポートしていないような Markdown 記法も使えるようになる点がメリットですが、入力と出力の対応関係が失われてしまうので Jupyter Notebook を表示している感が失われてしまいます。"),c.a.createElement("p",null,"結局 ipynb 形式でブログを書きたいときというのは、入力と出力の対応を明示したいときで、例えば LaTex を使いたいのであれば MDX 形式で書けばいいという結論に達し、 HTML で受けることにしました。"),c.a.createElement("h3",{id:"React-Component-にする"},"React Component にする",c.a.createElement("a",{className:"anchor-link",href:"#React-Component-にする"},"¶")),c.a.createElement("p",null,"Next.js は React Component を import することを期待するので、 Webpack の立場でいえば React Component を export するような文字列を生成する必要があります。"),c.a.createElement("p",null,"React Component を文字列として表現するには JSX が便利です。残念ながらこの目的を達成できる Webpack loader が見つからなかったので、  facebook が公開している ",c.a.createElement("a",{href:"https://www.npmjs.com/package/htmltojsx"},"htmltojsx")," という npm パッケージを使って自分で実装しました:"),c.a.createElement("div",{className:"highlight"},c.a.createElement("pre",null,c.a.createElement("span",null),c.a.createElement("span",{className:"kr"},"const")," ",c.a.createElement("span",{className:"nx"},"HTMLtoJSX")," ",c.a.createElement("span",{className:"o"},"=")," ",c.a.createElement("span",{className:"nx"},"require"),c.a.createElement("span",{className:"p"},"("),c.a.createElement("span",{className:"s2"},'"htmltojsx"'),c.a.createElement("span",{className:"p"},")"),"\n",c.a.createElement("span",{className:"kr"},"const")," ",c.a.createElement("span",{className:"nx"},"converter")," ",c.a.createElement("span",{className:"o"},"=")," ",c.a.createElement("span",{className:"k"},"new")," ",c.a.createElement("span",{className:"nx"},"HTMLtoJSX"),c.a.createElement("span",{className:"p"},"(","{")," ",c.a.createElement("span",{className:"nx"},"createClass"),c.a.createElement("span",{className:"o"},":")," ",c.a.createElement("span",{className:"kc"},"false")," ",c.a.createElement("span",{className:"p"},"}",")"),"\n","\n",c.a.createElement("span",{className:"nx"},"module"),c.a.createElement("span",{className:"p"},"."),c.a.createElement("span",{className:"nx"},"exports")," ",c.a.createElement("span",{className:"o"},"=")," ",c.a.createElement("span",{className:"kd"},"function")," ",c.a.createElement("span",{className:"p"},"("),c.a.createElement("span",{className:"nx"},"content"),c.a.createElement("span",{className:"p"},")")," ",c.a.createElement("span",{className:"p"},"{"),"\n","  ",c.a.createElement("span",{className:"c1"},"// content には ipynb-loader が返した HTML が入っている"),"\n","  ",c.a.createElement("span",{className:"k"},"return")," ",c.a.createElement("span",{className:"sb"},"`"),"\n",c.a.createElement("span",{className:"sb"},"  ",'import React from "react"'),"\n",c.a.createElement("span",{className:"sb"},"  ","export default () => "),c.a.createElement("span",{className:"si"},"$","{"),c.a.createElement("span",{className:"nx"},"converter"),c.a.createElement("span",{className:"p"},"."),c.a.createElement("span",{className:"nx"},"convert"),c.a.createElement("span",{className:"p"},"("),c.a.createElement("span",{className:"nx"},"content"),c.a.createElement("span",{className:"p"},")"),c.a.createElement("span",{className:"si"},"}"),c.a.createElement("span",{className:"sb"}),"\n",c.a.createElement("span",{className:"sb"},"  ","`"),"\n",c.a.createElement("span",{className:"p"},"}"),"\n")),c.a.createElement("h2",{id:"その他"},"その他",c.a.createElement("a",{className:"anchor-link",href:"#その他"},"¶")),c.a.createElement("ul",null,c.a.createElement("li",null,"これまで MDX ファイルに記述したメタデータを集めたメタデータ（entries.ts）を作っていましたが、 ipynb にはそういったメタデータをもたせることができないので、結局 entries.ts を自動生成するのを諦めて手動で管理することにしました。"),c.a.createElement("li",null,"ipynb から HTML を生成するのに jupyter/nbconvert を使うようにしたせいでアーキテクチャが無駄に複雑になってしまい、自動デプロイを維持するために Travis CI から CircleCI に乗り換えることになりました。 ipynb は所詮 JSON なので JavaScript で再実装してもいいかも知れません。その場合 Markdown を HTML に変換する部分を MDX と共通化できそうです。")),c.a.createElement("h2",{id:"おわりに"},"おわりに",c.a.createElement("a",{className:"anchor-link",href:"#おわりに"},"¶")),c.a.createElement("p",null,"次の仕事では pyspark とか使ってがんがんデータ分析などをやる予定なので、その過程で得た知見をこの機能を使ってブログに公開していきたいです。"),c.a.createElement("p",null,"余談として、今回初めて Webpack loader を書いてみましたが、思ったより簡単だったという印象です。今回の実装を通じて図らずも Webpack そのものに対する理解もだいぶ深まった気がするので、 Webpack 何やってるか分からんなーという人も一度書いてみるといいかも知れません。"),c.a.createElement("div",{className:"footnotes"},c.a.createElement("hr",null),c.a.createElement("ol",null,c.a.createElement("li",{id:"fn-1"},c.a.createElement("p",null,"Jupyter Notebook では LaTex 記法の実装に MathJax を使っていますが、このブログでは極力ブラウザ上では JSを走らせない方針にしているため。 MDX では ",c.a.createElement("a",{href:"https://www.npmjs.com/package/remark-math"},"remark-math")," と ",c.a.createElement("a",{href:"https://www.npmjs.com/package/rehype-katex"},"rehype-katex")," を使って実装しています。",c.a.createElement("a",{href:"#fnref-1",className:"footnote"},"↩")))))))))};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,a,t,n,r,l,c){try{var s=e[l](c),m=s.value}catch(e){return void t(e)}s.done?a(m):Promise.resolve(m).then(n,r)}function i(e,a){for(var t=0;t<a.length;t++){var n=a[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,a){return!a||"object"!==o(a)&&"function"!=typeof a?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):a}function E(e){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function b(e,a){return(b=Object.setPrototypeOf||function(e,a){return e.__proto__=a,e})(e,a)}t.d(a,"default",function(){return f});var f=function(e){function a(){return function(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}(this,a),u(this,E(a).apply(this,arguments))}var n,l,o;return function(e,a){if("function"!=typeof a&&null!==a)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(a&&a.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),a&&b(e,a)}(a,c.a.Component),n=a,l=[{key:"render",value:function(){return c.a.createElement(s.b,{meta:this.props.meta},c.a.createElement(m,null))}}],o=[{key:"getInitialProps",value:function(){var e,a=(e=r.a.mark(function e(){var a,n;return r.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return a=t(25),n=a.entries,e.abrupt("return",{meta:n["blog/2019/01/hello-ipynb"]});case 2:case"end":return e.stop()}},e)}),function(){var a=this,t=arguments;return new Promise(function(n,r){var l=e.apply(a,t);function c(e){p(l,n,r,c,s,"next",e)}function s(e){p(l,n,r,c,s,"throw",e)}c(void 0)})});return function(){return a.apply(this,arguments)}}()}],l&&i(n.prototype,l),o&&i(n,o),a}()}},[[390,1,0,2]]]);