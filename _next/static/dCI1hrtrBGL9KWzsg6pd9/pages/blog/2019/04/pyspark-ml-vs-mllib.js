(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{394:function(e,t,n){__NEXT_REGISTER_PAGE("/blog/2019/04/pyspark-ml-vs-mllib",function(){return e.exports=n(405),{page:e.exports.default}})},405:function(e,t,n){"use strict";n.r(t);var a=n(3),r=n.n(a),o=n(0),p=n.n(o),c=n(6),m=n(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function u(e,t){return!t||"object"!==i(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function f(e){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var b=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=u(this,f(t).call(this,e))).layout=null,n}var n,a,r;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(t,p.a.Component),n=t,(a=[{key:"render",value:function(){var e=this.props,t=e.components;l(e,["components"]);return p.a.createElement(m.MDXTag,{name:"wrapper",components:t},p.a.createElement(m.MDXTag,{name:"p",components:t},"Pyspark は 2.4.1 時点で ",p.a.createElement(m.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://spark.apache.org/docs/2.4.1/api/python/pyspark.ml.html"}},p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"a"},"pyspark.ml"))," と ",p.a.createElement(m.MDXTag,{name:"a",components:t,parentName:"p",props:{href:"https://spark.apache.org/docs/2.4.1/api/python/pyspark.mllib.html"}},p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"a"},"pyspark.mllib"))," という２つの機械学習用のパッケージを提供しています。"),p.a.createElement(m.MDXTag,{name:"p",components:t},"こういう用途の似たパッケージが複数存在する場合、片方がより原始的な実装になっていて細かな制御ができる一方、多くの用途では柔軟すぎて使いづらいのでそれを使いやすくラップしたものを用意している場合がありますが、今回はどうやらそういう訳ではなく純粋に ",p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"pyspark.mllib")," から ",p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"pyspark.ml")," に移行している途中のようです。どうしてこのようなことになっているのでしょうか。"),p.a.createElement(m.MDXTag,{name:"h2",components:t},"RDD → DataFrame / Dataset"),p.a.createElement(m.MDXTag,{name:"p",components:t},"Spark は内部で RDD (Resilient Distributed Dataset) と呼ばれるデータ構造を複数マシンのクラスタに分散して処理を実行します。RDD に格納するデータは構造化されている必要がないので、メディアストリームなどを格納することもできます。"),p.a.createElement(m.MDXTag,{name:"p",components:t},"一方で分散処理タスクで対象となるデータはある種の構造を持っていることが大半です。たとえば二次元の行列演算であれば一つ一つのデータは行と列と値の三組で表すことができます。ここに最適化の余地があり DataFrame / Dataset という新しいデータ構造が RDD の上に構築されました。"),p.a.createElement(m.MDXTag,{name:"p",components:t},"Dataset は構造化されたデータを扱えるだけでなく、強く型付けされた API と型なしの API に分類することができ、特にこの型が無い API を DataFrame と呼びます。名前からも分かるように Pandas の DataFrame と似た構造を持っています。Python にはコンパイル時の型安全がないので、 DataFrame だけを使うことができます。"),p.a.createElement(m.MDXTag,{name:"p",components:t},"DataFrame を使うことでメモリ使用量を削減したりパフォーマンスが改善するだけでなく、抽象度の高い機能を用いることによる生産性の向上や、 Jupyter Notebook 上でデータを表形式で綺麗に表示することができるなどのメリットがあります。"),p.a.createElement(m.MDXTag,{name:"h2",components:t},"pyspark.mllib → pyspark.ml"),p.a.createElement(m.MDXTag,{name:"p",components:t},p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"pyspark.mllib")," と ",p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"pyspark.ml")," はそれぞれ RDD と DataFrame をベースにした API を提供しています。機械学習のアルゴリズムは行列演算として定式化されていることが多いので、まさに DataFrame に乗せかえるのにうってつけです。"),p.a.createElement(m.MDXTag,{name:"p",components:t},"DataFrame を使っているということはその分パフォーマンスも優れているはずなので、今後は ",p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"pyspark.ml")," を使えば良さそうです。"),p.a.createElement(m.MDXTag,{name:"p",components:t},"むしろ ",p.a.createElement(m.MDXTag,{name:"inlineCode",components:t,parentName:"p"},"pyspark.mllib")," はすでにメンテナンスモードに入っていて Spark 3.0 で廃止されるみたいなので使うべきではないですね。"),p.a.createElement(m.MDXTag,{name:"h2",components:t},"参考"),p.a.createElement(m.MDXTag,{name:"ul",components:t},p.a.createElement(m.MDXTag,{name:"li",components:t,parentName:"ul"},p.a.createElement(m.MDXTag,{name:"a",components:t,parentName:"li",props:{href:"https://databricks.com/blog/2016/07/14/a-tale-of-three-apache-spark-apis-rdds-dataframes-and-datasets.html"}},"RDD vs DataFrames and Datasets: A Tale of Three Apache Spark APIs")),p.a.createElement(m.MDXTag,{name:"li",components:t,parentName:"ul"},p.a.createElement(m.MDXTag,{name:"a",components:t,parentName:"li",props:{href:"https://techvidvan.com/tutorials/apache-spark-rdd-vs-datasets/"}},"Comparison between RDD vs DataSets- Apache Spark – TechVidvan"))))}}])&&s(n.prototype,a),r&&s(n,r),t}();function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function D(e,t,n,a,r,o,p){try{var c=e[o](p),m=c.value}catch(e){return void n(e)}c.done?t(m):Promise.resolve(m).then(a,r)}function g(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function d(e,t){return!t||"object"!==h(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function v(e){return(v=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function E(e,t){return(E=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.d(t,"default",function(){return T});var T=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),d(this,v(t).apply(this,arguments))}var a,o,m;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&E(e,t)}(t,p.a.Component),a=t,o=[{key:"render",value:function(){return p.a.createElement(c.a,{meta:this.props.meta},p.a.createElement(b,null))}}],m=[{key:"getInitialProps",value:function(){var e,t=(e=r.a.mark(function e(){var t,a;return r.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=n(19),a=t.entries,e.abrupt("return",{meta:a["blog/2019/04/pyspark-ml-vs-mllib"]});case 2:case"end":return e.stop()}},e)}),function(){var t=this,n=arguments;return new Promise(function(a,r){var o=e.apply(t,n);function p(e){D(o,a,r,p,c,"next",e)}function c(e){D(o,a,r,p,c,"throw",e)}p(void 0)})});return function(){return t.apply(this,arguments)}}()}],o&&g(a.prototype,o),m&&g(a,m),t}()}},[[394,1,0,2]]]);