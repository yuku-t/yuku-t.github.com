(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{385:function(e,t,a){__NEXT_REGISTER_PAGE("/blog/2019/01/deploy-app-engine-from-circleci",function(){return e.exports=a(405),{page:e.exports.default}})},405:function(e,t,a){"use strict";a.r(t);var n=a(3),o=a.n(n),l=a(1),r=a.n(l),c=a(5),i=a(0);a(17);function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var b={},s="wrapper";function m(e){var t=e.components,a=u(e,["components"]);return Object(i.a)(s,p({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.a)("p",null,"所用で Google App Engine を使うことになり"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"master")," ブランチへ push したら staging にリリースする"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"/^v\\d+\\.\\d+\\.\\d+$/")," にマッチするタグを push のとき production にリリースする")),Object(i.a)("p",null,"という仕様で CircleCI を使って自動デプロイを実装しました。この構成はなかなか便利で再利用する機会がありそうなので、やったことを備忘録としてまとめます。"),Object(i.a)("h2",null,"サービスアカウントを作る"),Object(i.a)("p",null,"CircleCI 上で Cloud SDK を認証するためのサービスアカウントを作ります:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"Google Cloud Platform Console の ",Object(i.a)("a",p({parentName:"li"},{href:"https://console.cloud.google.com/iam-admin/serviceaccounts"}),"サービスアカウント")," から新しいアカウントを作成",Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},'名前はわかりやすく "circleci" とかにする'),Object(i.a)("li",{parentName:"ul"},"最後にキーを作って忘れずに JSON をダウンロードしておく（あとで使う）"))),Object(i.a)("li",{parentName:"ol"},Object(i.a)("a",p({parentName:"li"},{href:"https://console.cloud.google.com/iam-admin/iam"}),"IAM")," で先程作ったサービスアカウントに役割を付与する",Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},"App Engine デプロイ担当者（",Object(i.a)("inlineCode",{parentName:"li"},"appengine.deployer"),"）"),Object(i.a)("li",{parentName:"ul"},"App Engine サービス管理者（",Object(i.a)("inlineCode",{parentName:"li"},"appengine.serviceAdmin"),"）"),Object(i.a)("li",{parentName:"ul"},"Cloud Build 編集者（",Object(i.a)("inlineCode",{parentName:"li"},"cloudbuild.builds.editor"),"）"),Object(i.a)("li",{parentName:"ul"},"ストレージのオブジェクト作成者（",Object(i.a)("inlineCode",{parentName:"li"},"storage.objectCreator"),"）"),Object(i.a)("li",{parentName:"ul"},"ステージオブジェクト閲覧者（",Object(i.a)("inlineCode",{parentName:"li"},"storage.objectViewer"),"）")))),Object(i.a)("p",null,"役割を付与しても実際に SDK から操作したときにその結果が反映されるまで数分単位でラグがあるので注意が必要です。"),Object(i.a)("p",null,"また新しい GCP プロジェクトを作ると（もしかしたら App Engine を有効にしたときかも知れない） Cloud Build サービスアカウント（",Object(i.a)("inlineCode",{parentName:"p"},"cloudbuild.builds.builder"),"）という役割を持った ",Object(i.a)("inlineCode",{parentName:"p"},"xxx@cloudbuild.gserviceaccount.com")," というサービスアカウントが作られますが、このアカウントにも追加で"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"ステージオブジェクト閲覧者（",Object(i.a)("inlineCode",{parentName:"li"},"storage.objectViewer"),"）")),Object(i.a)("p",null,"を付与する必要がありました。"),Object(i.a)("h2",null,"CircleCI を設定する"),Object(i.a)("p",null,"今回の Google App Engine は nodejs10 で実装されていて、いくつかの npm scripts が定義されています:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"npm run test"),Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},"テストを実行する。"))),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"npm run build"),Object(i.a)("ul",{parentName:"li"},Object(i.a)("li",{parentName:"ul"},"プロジェクトをビルドして build ディレクトリに成果物を生成する。"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"gcloug app deploy")," でアップロードしなければならないので、デプロイ時に成果物が存在する必要がある。")))),Object(i.a)("p",null,"こういう仕様のもと以下のように実装しました。"),Object(i.a)("h3",null,"Cloud SDK"),Object(i.a)("p",null,Object(i.a)("a",p({parentName:"p"},{href:"/blog/2019/01/google-cloud-sdk-in-docker"}),"Docker で Google Cloud SDK を使う")," で使った ",Object(i.a)("a",p({parentName:"p"},{href:"https://hub.docker.com/r/google/cloud-sdk/"}),"google/cloud-sdk")," をここでも使います。"),Object(i.a)("p",null,"先程作ったサービスアカウントで Cloud SDK を認証します。ダウンロードした JSON を CircleCI の環境変数に設定します。今回は ",Object(i.a)("inlineCode",{parentName:"p"},"GCLOUD_SERVICE_KEY")," という名前にしました。すると、以下のコマンドで Cloud SDK を認証することができます:"),Object(i.a)("pre",{className:"language-bash"},Object(i.a)("code",p({parentName:"pre"},{className:"language-bash"}),Object(i.a)("span",p({parentName:"code"},{className:"token builtin class-name"}),"echo")," ",Object(i.a)("span",p({parentName:"code"},{className:"token variable"}),"$GCLOUD_SERVICE_KEY")," ",Object(i.a)("span",p({parentName:"code"},{className:"token operator"}),"|")," gcloud auth activate-service-account --key-file",Object(i.a)("span",p({parentName:"code"},{className:"token operator"}),"="),"-\n")),Object(i.a)("h3",null,"workspace"),Object(i.a)("p",null,"とくに問題になったのがデプロイ時にビルドした成果物が必要だったことです。ビルドするには Node.js が必要ですが、 Google が提供している google/cloud-sdk という Docker イメージには当然 Node.js はインストールされていないので:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"Node.js と Cloud SDK が両方使える Docker イメージを作ってそれを使う"),Object(i.a)("li",{parentName:"ol"},"何かしらの方法で Node.js のコンテナでビルドした成果物を Cloud SDK のコンテナに持っていく")),Object(i.a)("p",null,"など方法で対処する必要があります。最初は 1. でやっていたのですが改めて CircleCI のドキュメントを読み返したところ ",Object(i.a)("a",p({parentName:"p"},{href:"https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs"}),"workspace を使えば job をまたいでファイルを受け渡すことができる"),"ことが分かったのでそれを使うことにしました。"),Object(i.a)("h3",null,"デプロイ"),Object(i.a)("p",null,"App Engine へのデプロイには ",Object(i.a)("inlineCode",{parentName:"p"},"gcloud app deploy")," コマンドを使います。今回は目的に応じて以下のオプションを使いました:"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"--version")," - バージョンに名前をつける。同じ名前を使うと仮に既存のバージョンが存在している場合それを置き換えることができる。"),Object(i.a)("li",{parentName:"ul"},Object(i.a)("inlineCode",{parentName:"li"},"--no-promote")," - デプロイ後に新しく作ったバージョンにトラフィックを回さない。 staging をデプロイしても production を変更しないためにこのオプションを使う。")),Object(i.a)("p",null,"オプションに ",Object(i.a)("inlineCode",{parentName:"p"},"--stop-previous-version")," というオプションがヘルプにあって当初は各リリースで別のバージョンを作ろうと思ったのですが、ドキュメントを読んでも実際に使ってみても挙動がよく分からなかったので ",Object(i.a)("inlineCode",{parentName:"p"},"--version")," で置き換える方式にしています。"),Object(i.a)("h2",null,"おわりに"),Object(i.a)("p",null,"毎日触るならまだしも、たまにしか触らないプロジェクトはデプロイ作業はさらに頻度が下がるので、久しぶりにデプロイしようと思うたびに正しいやり方を思い出すことから始めなければならなくなったりします。"),Object(i.a)("p",null,"こうした自動化は初期投資は少し大きくなりますがやっておいて損はないと感じます。ドキュメントとしてやり方を残しておけば、次回以降の初期投資自体が小さくなっていきますしね。"),Object(i.a)("h2",null,"参考"),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",p({parentName:"li"},{href:"https://circleci.com/docs/2.0/google-auth/"}),"Authorizing the Google Cloud SDK - CircleCI")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",p({parentName:"li"},{href:"https://cloud.google.com/sdk/docs/authorizing#authorizing_with_a_service_account"}),"Cloud SDK ツールの承認  |  Cloud SDK のドキュメント  |  Google Cloud")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",p({parentName:"li"},{href:"https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs"}),"Using Workflows to Schedule Jobs - CircleCI")),Object(i.a)("li",{parentName:"ul"},Object(i.a)("a",p({parentName:"li"},{href:"https://cloud.google.com/sdk/gcloud/reference/app/deploy"}),"gcloud app deploy  |  Cloud SDK  |  Google Cloud"))))}function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function d(e,t,a,n,o,l,r){try{var c=e[l](r),i=c.value}catch(e){return void a(e)}c.done?t(i):Promise.resolve(i).then(n,o)}function j(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function f(e,t){return!t||"object"!==O(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function g(e){return(g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function N(e,t){return(N=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}m.isMDXComponent=!0,a.d(t,"default",function(){return h});var h=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),f(this,g(t).apply(this,arguments))}var n,l,i;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&N(e,t)}(t,r.a.Component),n=t,l=[{key:"render",value:function(){return r.a.createElement(c.a,{meta:this.props.meta},r.a.createElement(m,null))}}],i=[{key:"getInitialProps",value:function(){var e,t=(e=o.a.mark(function e(){var t,n;return o.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return t=a(12),n=t.entries,e.abrupt("return",{meta:n["blog/2019/01/deploy-app-engine-from-circleci"]});case 2:case"end":return e.stop()}},e)}),function(){var t=this,a=arguments;return new Promise(function(n,o){var l=e.apply(t,a);function r(e){d(l,n,o,r,c,"next",e)}function c(e){d(l,n,o,r,c,"throw",e)}r(void 0)})});return function(){return t.apply(this,arguments)}}()}],l&&j(n.prototype,l),i&&j(n,i),t}()}},[[385,1,0,2]]]);